
SailingComputerLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001214a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227e  00000000  00000000  00032186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00034408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  00035330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020420  00000000  00000000  00036180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a70  00000000  00000000  000565a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f5a  00000000  00000000  0006a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130f6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004020  00000000  00000000  00130fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e44 	.word	0x08003e44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e44 	.word	0x08003e44

080001d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f023 030f 	bic.w	r3, r3, #15
 80001e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	f043 030c 	orr.w	r3, r3, #12
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000200:	7bbb      	ldrb	r3, [r7, #14]
 8000202:	f043 030c 	orr.w	r3, r3, #12
 8000206:	b2db      	uxtb	r3, r3
 8000208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000214:	f107 0208 	add.w	r2, r7, #8
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2304      	movs	r3, #4
 800021e:	214e      	movs	r1, #78	; 0x4e
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <lcd_send_cmd+0x5c>)
 8000222:	f000 ff4f 	bl	80010c4 <HAL_I2C_Master_Transmit>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028

08000234 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	f043 030d 	orr.w	r3, r3, #13
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	f043 0309 	orr.w	r3, r3, #9
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 030d 	orr.w	r3, r3, #13
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	f043 0309 	orr.w	r3, r3, #9
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000274:	f107 0208 	add.w	r2, r7, #8
 8000278:	2364      	movs	r3, #100	; 0x64
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2304      	movs	r3, #4
 800027e:	214e      	movs	r1, #78	; 0x4e
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <lcd_send_data+0x5c>)
 8000282:	f000 ff1f 	bl	80010c4 <HAL_I2C_Master_Transmit>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <lcd_clear>:

void lcd_clear (void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800029a:	2080      	movs	r0, #128	; 0x80
 800029c:	f7ff ff9a 	bl	80001d4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	e005      	b.n	80002b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80002a6:	2020      	movs	r0, #32
 80002a8:	f7ff ffc4 	bl	8000234 <lcd_send_data>
	for (int i=0; i<70; i++)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b45      	cmp	r3, #69	; 0x45
 80002b6:	ddf6      	ble.n	80002a6 <lcd_clear+0x12>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b082      	sub	sp, #8
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <lcd_put_cur+0x18>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d005      	beq.n	80002e4 <lcd_put_cur+0x22>
 80002d8:	e009      	b.n	80002ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	603b      	str	r3, [r7, #0]
            break;
 80002e2:	e004      	b.n	80002ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002ea:	603b      	str	r3, [r7, #0]
            break;
 80002ec:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff6e 	bl	80001d4 <lcd_send_cmd>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lcd_init>:


void lcd_init (void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000304:	2032      	movs	r0, #50	; 0x32
 8000306:	f000 fba5 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x30);
 800030a:	2030      	movs	r0, #48	; 0x30
 800030c:	f7ff ff62 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 8000310:	200f      	movs	r0, #15
 8000312:	f000 fb9f 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000316:	2030      	movs	r0, #48	; 0x30
 8000318:	f7ff ff5c 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);  // wait for >100us
 800031c:	200f      	movs	r0, #15
 800031e:	f000 fb99 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000322:	2030      	movs	r0, #48	; 0x30
 8000324:	f7ff ff56 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);
 8000328:	200f      	movs	r0, #15
 800032a:	f000 fb93 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800032e:	2020      	movs	r0, #32
 8000330:	f7ff ff50 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);
 8000334:	200f      	movs	r0, #15
 8000336:	f000 fb8d 	bl	8000a54 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800033a:	2028      	movs	r0, #40	; 0x28
 800033c:	f7ff ff4a 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);
 8000340:	200f      	movs	r0, #15
 8000342:	f000 fb87 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000346:	2008      	movs	r0, #8
 8000348:	f7ff ff44 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);
 800034c:	200f      	movs	r0, #15
 800034e:	f000 fb81 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ff3e 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(15);
 8000358:	200f      	movs	r0, #15
 800035a:	f000 fb7b 	bl	8000a54 <HAL_Delay>
	HAL_Delay(15);
 800035e:	200f      	movs	r0, #15
 8000360:	f000 fb78 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000364:	2006      	movs	r0, #6
 8000366:	f7ff ff35 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f000 fb72 	bl	8000a54 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000370:	200c      	movs	r0, #12
 8000372:	f7ff ff2f 	bl	80001d4 <lcd_send_cmd>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}

0800037a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000382:	e006      	b.n	8000392 <lcd_send_string+0x18>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	607a      	str	r2, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff51 	bl	8000234 <lcd_send_data>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f4      	bne.n	8000384 <lcd_send_string+0xa>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fb1e 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f83e 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f910 	bl	80005d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b4:	f000 f8de 	bl	8000574 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80003b8:	f000 f89c 	bl	80004f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	lcd_init();
 80003bc:	f7ff ffa0 	bl	8000300 <lcd_init>

	lcd_put_cur(1, 0); // was 1,0 (first number is the row (2 is the top row) and the second is the column - appears as if column 0 is the far left
 80003c0:	2100      	movs	r1, #0
 80003c2:	2001      	movs	r0, #1
 80003c4:	f7ff ff7d 	bl	80002c2 <lcd_put_cur>

	lcd_send_string("Sailboat");
 80003c8:	4814      	ldr	r0, [pc, #80]	; (800041c <main+0x78>)
 80003ca:	f7ff ffd6 	bl	800037a <lcd_send_string>

	HAL_Delay(1000);
 80003ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d2:	f000 fb3f 	bl	8000a54 <HAL_Delay>

	//lcd_put_cur(2, 1); // was 1,0 (first number is the row (2 is the top row) and the second is the column - appears as if column 0 is the far left

	lcd_send_string(" Racing");
 80003d6:	4812      	ldr	r0, [pc, #72]	; (8000420 <main+0x7c>)
 80003d8:	f7ff ffcf 	bl	800037a <lcd_send_string>

	HAL_Delay(3000);
 80003dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003e0:	f000 fb38 	bl	8000a54 <HAL_Delay>

	lcd_clear();
 80003e4:	f7ff ff56 	bl	8000294 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		lcd_put_cur(1, 0); // was 1,0 (first number is the row (2 is the top row) and the second is the column - appears as if column 0 is the far left
 80003e8:	2100      	movs	r1, #0
 80003ea:	2001      	movs	r0, #1
 80003ec:	f7ff ff69 	bl	80002c2 <lcd_put_cur>
		lcd_send_string("GPS:XYZ");
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <main+0x80>)
 80003f2:	f7ff ffc2 	bl	800037a <lcd_send_string>
		HAL_Delay(3000);
 80003f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003fa:	f000 fb2b 	bl	8000a54 <HAL_Delay>
		//lcd_clear();
		//lcd_put_cur(2, 0); // was 1,0 (first number is the row (2 is the top row) and the second is the column - appears as if column 0 is the far left
		lcd_send_string(" GPS:ABC");
 80003fe:	480a      	ldr	r0, [pc, #40]	; (8000428 <main+0x84>)
 8000400:	f7ff ffbb 	bl	800037a <lcd_send_string>
		HAL_Delay(3000);
 8000404:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000408:	f000 fb24 	bl	8000a54 <HAL_Delay>
		lcd_clear();
 800040c:	f7ff ff42 	bl	8000294 <lcd_clear>
		HAL_Delay(1000);
 8000410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000414:	f000 fb1e 	bl	8000a54 <HAL_Delay>
		lcd_put_cur(1, 0); // was 1,0 (first number is the row (2 is the top row) and the second is the column - appears as if column 0 is the far left
 8000418:	e7e6      	b.n	80003e8 <main+0x44>
 800041a:	bf00      	nop
 800041c:	08003e5c 	.word	0x08003e5c
 8000420:	08003e68 	.word	0x08003e68
 8000424:	08003e70 	.word	0x08003e70
 8000428:	08003e78 	.word	0x08003e78

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b0a6      	sub	sp, #152	; 0x98
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000436:	2228      	movs	r2, #40	; 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fcfa 	bl	8003e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2258      	movs	r2, #88	; 0x58
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fcec 	bl	8003e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800045c:	2303      	movs	r3, #3
 800045e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000464:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046a:	2310      	movs	r3, #16
 800046c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800047e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000490:	4618      	mov	r0, r3
 8000492:	f001 f927 	bl	80016e4 <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800049c:	f000 f912 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	230f      	movs	r3, #15
 80004a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2302      	movs	r3, #2
 80004a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004ba:	2102      	movs	r1, #2
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 f965 	bl	800278c <HAL_RCC_ClockConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004c8:	f000 f8fc 	bl	80006c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80004cc:	2322      	movs	r3, #34	; 0x22
 80004ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fbbe 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80004e6:	f000 f8ed 	bl	80006c4 <Error_Handler>
  }
}
 80004ea:	bf00      	nop
 80004ec:	3798      	adds	r7, #152	; 0x98
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_I2C1_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_I2C1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_I2C1_Init+0x74>)
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <MX_I2C1_Init+0x7c>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_I2C1_Init+0x74>)
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2C1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2C1_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052e:	480e      	ldr	r0, [pc, #56]	; (8000568 <MX_I2C1_Init+0x74>)
 8000530:	f000 fd38 	bl	8000fa4 <HAL_I2C_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053a:	f000 f8c3 	bl	80006c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <MX_I2C1_Init+0x74>)
 8000542:	f001 f837 	bl	80015b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f8ba 	bl	80006c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000550:	2100      	movs	r1, #0
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_I2C1_Init+0x74>)
 8000554:	f001 f879 	bl	800164a <HAL_I2CEx_ConfigDigitalFilter>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f8b1 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028
 800056c:	40005400 	.word	0x40005400
 8000570:	2000090e 	.word	0x2000090e

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MX_USART2_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000580:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b8:	f003 f844 	bl	8003644 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f87f 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000074 	.word	0x20000074
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xc4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f000 fc8f 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xc8>)
 800066e:	f000 faf7 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000672:	2320      	movs	r3, #32
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 fae8 	bl	8000c60 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800

080006a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b2:	f000 f9af 	bl	8000a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40014800 	.word	0x40014800

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fa75 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d128      	bne.n	800078c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000764:	2304      	movs	r3, #4
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_I2C_MspInit+0x84>)
 8000770:	f000 fa76 	bl	8000c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_UART_MspInit+0x7c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d128      	bne.n	8000814 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_UART_MspInit+0x80>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000802:	2307      	movs	r3, #7
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fa26 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <HAL_InitTick+0xcc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <HAL_InitTick+0xcc>)
 800083a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <HAL_InitTick+0xcc>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800084c:	f107 020c 	add.w	r2, r7, #12
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f9ce 	bl	8002bf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800085c:	f002 f9aa 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8000860:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <HAL_InitTick+0xd0>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	0c9b      	lsrs	r3, r3, #18
 800086c:	3b01      	subs	r3, #1
 800086e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <HAL_InitTick+0xd4>)
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <HAL_InitTick+0xd8>)
 8000874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_InitTick+0xd4>)
 8000878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_InitTick+0xd4>)
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000882:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_InitTick+0xd4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_InitTick+0xd4>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_InitTick+0xd4>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <HAL_InitTick+0xd4>)
 8000898:	f002 fbfe 	bl	8003098 <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d11b      	bne.n	80008e2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <HAL_InitTick+0xd4>)
 80008ac:	f002 fc56 	bl	800315c <HAL_TIM_Base_Start_IT>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d111      	bne.n	80008e2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80008be:	201a      	movs	r0, #26
 80008c0:	f000 f9c0 	bl	8000c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d808      	bhi.n	80008dc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80008ca:	2200      	movs	r2, #0
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	201a      	movs	r0, #26
 80008d0:	f000 f99c 	bl	8000c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_InitTick+0xdc>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e002      	b.n	80008e2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	200000f8 	.word	0x200000f8
 80008fc:	40014800 	.word	0x40014800
 8000900:	20000004 	.word	0x20000004

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000962:	f002 fc6b 	bl	800323c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000f8 	.word	0x200000f8

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f003 fa13 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fced 	bl	80003a4 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	08003ec4 	.word	0x08003ec4
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	20000148 	.word	0x20000148

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f8fc 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff ff10 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe64 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000144 	.word	0x20000144

08000a3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000144 	.word	0x20000144

08000a54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e160      	b.n	8000f32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 8152 	beq.w	8000f2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	6939      	ldr	r1, [r7, #16]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0203 	and.w	r2, r3, #3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 80ac 	beq.w	8000f2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a5d      	ldr	r2, [pc, #372]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dec:	4a59      	ldr	r2, [pc, #356]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e16:	d025      	beq.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <HAL_GPIO_Init+0x2f8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d01f      	beq.n	8000e60 <HAL_GPIO_Init+0x200>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x2fc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d019      	beq.n	8000e5c <HAL_GPIO_Init+0x1fc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x300>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d013      	beq.n	8000e58 <HAL_GPIO_Init+0x1f8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d00d      	beq.n	8000e54 <HAL_GPIO_Init+0x1f4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4b      	ldr	r2, [pc, #300]	; (8000f68 <HAL_GPIO_Init+0x308>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d007      	beq.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a4a      	ldr	r2, [pc, #296]	; (8000f6c <HAL_GPIO_Init+0x30c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d101      	bne.n	8000e4c <HAL_GPIO_Init+0x1ec>
 8000e48:	2306      	movs	r3, #6
 8000e4a:	e00c      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	e00a      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e50:	2305      	movs	r3, #5
 8000e52:	e008      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e54:	2304      	movs	r3, #4
 8000e56:	e006      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e004      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <HAL_GPIO_Init+0x206>
 8000e64:	2300      	movs	r3, #0
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	f002 0203 	and.w	r2, r2, #3
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	4093      	lsls	r3, r2
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e76:	4937      	ldr	r1, [pc, #220]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed2:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f47f ae97 	bne.w	8000c70 <HAL_GPIO_Init+0x10>
  }
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010000 	.word	0x40010000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	48000800 	.word	0x48000800
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	48001000 	.word	0x48001000
 8000f68:	48001400 	.word	0x48001400
 8000f6c:	48001800 	.word	0x48001800
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e081      	b.n	80010ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fba4 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d107      	bne.n	800101e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e006      	b.n	800102c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800102a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d104      	bne.n	800103e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69d9      	ldr	r1, [r3, #28]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	461a      	mov	r2, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	817b      	strh	r3, [r7, #10]
 80010d4:	4613      	mov	r3, r2
 80010d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	f040 80da 	bne.w	800129a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_I2C_Master_Transmit+0x30>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e0d3      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010fc:	f7ff fc9e 	bl	8000a3c <HAL_GetTick>
 8001100:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2319      	movs	r3, #25
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 f8f0 	bl	80012f4 <I2C_WaitOnFlagUntilTimeout>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0be      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2221      	movs	r2, #33	; 0x21
 8001122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2210      	movs	r2, #16
 800112a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	893a      	ldrh	r2, [r7, #8]
 800113e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114a:	b29b      	uxth	r3, r3
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d90e      	bls.n	800116e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	8979      	ldrh	r1, [r7, #10]
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f9f6 	bl	8001558 <I2C_TransferConfig>
 800116c:	e06c      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117c:	b2da      	uxtb	r2, r3
 800117e:	8979      	ldrh	r1, [r7, #10]
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 f9e5 	bl	8001558 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800118e:	e05b      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	6a39      	ldr	r1, [r7, #32]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f8ed 	bl	8001374 <I2C_WaitOnTXISFlagUntilTimeout>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e07b      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d034      	beq.n	8001248 <HAL_I2C_Master_Transmit+0x184>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d130      	bne.n	8001248 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f87f 	bl	80012f4 <I2C_WaitOnFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e04d      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d90e      	bls.n	8001228 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001214:	b2da      	uxtb	r2, r3
 8001216:	8979      	ldrh	r1, [r7, #10]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f999 	bl	8001558 <I2C_TransferConfig>
 8001226:	e00f      	b.n	8001248 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	8979      	ldrh	r1, [r7, #10]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f988 	bl	8001558 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d19e      	bne.n	8001190 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	6a39      	ldr	r1, [r7, #32]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f8cc 	bl	80013f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e01a      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800127a:	400b      	ands	r3, r1
 800127c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800129a:	2302      	movs	r3, #2
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	80002000 	.word	0x80002000
 80012a8:	fe00e800 	.word	0xfe00e800

080012ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d103      	bne.n	80012ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d007      	beq.n	80012e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	619a      	str	r2, [r3, #24]
  }
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001304:	e022      	b.n	800134c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800130c:	d01e      	beq.n	800134c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800130e:	f7ff fb95 	bl	8000a3c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d302      	bcc.n	8001324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d113      	bne.n	800134c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	f043 0220 	orr.w	r2, r3, #32
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2220      	movs	r2, #32
 8001334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e00f      	b.n	800136c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4013      	ands	r3, r2
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	429a      	cmp	r2, r3
 8001368:	d0cd      	beq.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001380:	e02c      	b.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 f870 	bl	800146c <I2C_IsAcknowledgeFailed>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e02a      	b.n	80013ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800139c:	d01e      	beq.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139e:	f7ff fb4d 	bl	8000a3c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d302      	bcc.n	80013b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d113      	bne.n	80013dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	f043 0220 	orr.w	r2, r3, #32
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e007      	b.n	80013ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d1cb      	bne.n	8001382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001400:	e028      	b.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f830 	bl	800146c <I2C_IsAcknowledgeFailed>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e026      	b.n	8001464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001416:	f7ff fb11 	bl	8000a3c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d302      	bcc.n	800142c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d113      	bne.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f043 0220 	orr.w	r2, r3, #32
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e007      	b.n	8001464 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	2b20      	cmp	r3, #32
 8001460:	d1cf      	bne.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b10      	cmp	r3, #16
 8001484:	d161      	bne.n	800154a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001494:	d02b      	beq.n	80014ee <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014a4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014a6:	e022      	b.n	80014ee <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ae:	d01e      	beq.n	80014ee <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b0:	f7ff fac4 	bl	8000a3c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d302      	bcc.n	80014c6 <I2C_IsAcknowledgeFailed+0x5a>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d113      	bne.n	80014ee <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f043 0220 	orr.w	r2, r3, #32
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e02e      	b.n	800154c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d1d5      	bne.n	80014a8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2210      	movs	r2, #16
 8001502:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fecd 	bl	80012ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <I2C_IsAcknowledgeFailed+0xe8>)
 800151e:	400b      	ands	r3, r1
 8001520:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f043 0204 	orr.w	r2, r3, #4
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	fe00e800 	.word	0xfe00e800

08001558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	817b      	strh	r3, [r7, #10]
 8001566:	4613      	mov	r3, r2
 8001568:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <I2C_TransferConfig+0x58>)
 800157a:	430b      	orrs	r3, r1
 800157c:	43db      	mvns	r3, r3
 800157e:	ea02 0103 	and.w	r1, r2, r3
 8001582:	897b      	ldrh	r3, [r7, #10]
 8001584:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001588:	7a7b      	ldrb	r3, [r7, #9]
 800158a:	041b      	lsls	r3, r3, #16
 800158c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	431a      	orrs	r2, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	03ff63ff 	.word	0x03ff63ff

080015b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d138      	bne.n	800163c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e032      	b.n	800163e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e000      	b.n	800163e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800163c:	2302      	movs	r3, #2
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	d139      	bne.n	80016d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800166a:	2302      	movs	r3, #2
 800166c:	e033      	b.n	80016d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2224      	movs	r2, #36	; 0x24
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800169c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2220      	movs	r2, #32
 80016c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016d4:	2302      	movs	r3, #2
  }
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	f001 b83a 	b.w	800277e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 816f 	beq.w	80019fe <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001720:	4bb5      	ldr	r3, [pc, #724]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d00c      	beq.n	8001746 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172c:	4bb2      	ldr	r3, [pc, #712]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d15c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x10e>
 8001738:	4baf      	ldr	r3, [pc, #700]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d155      	bne.n	80017f2 <HAL_RCC_OscConfig+0x10e>
 8001746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800175a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x94>
 8001772:	4ba1      	ldr	r3, [pc, #644]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0xc0>
 8001778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800178c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001790:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001794:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017a0:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80017ac:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80017b0:	fa92 f2a2 	rbit	r2, r2
 80017b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80017b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017bc:	fab2 f282 	clz	r2, r2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f042 0220 	orr.w	r2, r2, #32
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f002 021f 	and.w	r2, r2, #31
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f202 	lsl.w	r2, r1, r2
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8111 	beq.w	80019fc <HAL_RCC_OscConfig+0x318>
 80017da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 8108 	bne.w	80019fc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f000 bfc6 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x12e>
 8001804:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e036      	b.n	8001880 <HAL_RCC_OscConfig+0x19c>
 8001812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001816:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x158>
 8001822:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a74      	ldr	r2, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a71      	ldr	r2, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e021      	b.n	8001880 <HAL_RCC_OscConfig+0x19c>
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x184>
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x19c>
 8001868:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a62      	ldr	r2, [pc, #392]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5f      	ldr	r2, [pc, #380]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001884:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d059      	beq.n	8001944 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f8d4 	bl	8000a3c <HAL_GetTick>
 8001894:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189a:	f7ff f8cf 	bl	8000a3c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d902      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f000 bf67 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 80018b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80018c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0x1fe>
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x22a>
 80018e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001912:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001916:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800191a:	fa92 f2a2 	rbit	r2, r2
 800191e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001922:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f042 0220 	orr.w	r2, r2, #32
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f002 021f 	and.w	r2, r2, #31
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ab      	beq.n	800189a <HAL_RCC_OscConfig+0x1b6>
 8001942:	e05c      	b.n	80019fe <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f87a 	bl	8000a3c <HAL_GetTick>
 8001948:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194e:	f7ff f875 	bl	8000a3c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d902      	bls.n	8001964 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	f000 bf0d 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 8001964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001968:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001978:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <HAL_RCC_OscConfig+0x2b2>
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x2de>
 8001996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80019aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_RCC_OscConfig+0x314>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80019ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80019ce:	fa92 f2a2 	rbit	r2, r2
 80019d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80019d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019da:	fab2 f282 	clz	r2, r2
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f042 0220 	orr.w	r2, r2, #32
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f002 021f 	and.w	r2, r2, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ab      	bne.n	800194e <HAL_RCC_OscConfig+0x26a>
 80019f6:	e002      	b.n	80019fe <HAL_RCC_OscConfig+0x31a>
 80019f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 817f 	beq.w	8001d12 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a14:	4ba7      	ldr	r3, [pc, #668]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a20:	4ba4      	ldr	r3, [pc, #656]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d173      	bne.n	8001b14 <HAL_RCC_OscConfig+0x430>
 8001a2c:	4ba1      	ldr	r3, [pc, #644]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a38:	d16c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x430>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a4c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0x386>
 8001a64:	4b93      	ldr	r3, [pc, #588]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e013      	b.n	8001a92 <HAL_RCC_OscConfig+0x3ae>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a82:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2202      	movs	r2, #2
 8001a94:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a98:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a9c:	fa92 f2a2 	rbit	r2, r2
 8001aa0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001aa4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <HAL_RCC_OscConfig+0x3f6>
 8001ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d002      	beq.n	8001ada <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 be52 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	21f8      	movs	r1, #248	; 0xf8
 8001af0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001af8:	fa91 f1a1 	rbit	r1, r1
 8001afc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b00:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b04:	fab1 f181 	clz	r1, r1
 8001b08:	b2c9      	uxtb	r1, r1
 8001b0a:	408b      	lsls	r3, r1
 8001b0c:	4969      	ldr	r1, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e0fe      	b.n	8001d12 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8088 	beq.w	8001c36 <HAL_RCC_OscConfig+0x552>
 8001b26:	2301      	movs	r3, #1
 8001b28:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b38:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7fe ff73 	bl	8000a3c <HAL_GetTick>
 8001b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe ff6e 	bl	8000a3c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d902      	bls.n	8001b72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	f000 be06 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4be>
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e013      	b.n	8001bca <HAL_RCC_OscConfig+0x4e6>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001bd0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001bdc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0af      	beq.n	8001b5c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	21f8      	movs	r1, #248	; 0xf8
 8001c12:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c1a:	fa91 f1a1 	rbit	r1, r1
 8001c1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c26:	fab1 f181 	clz	r1, r1
 8001c2a:	b2c9      	uxtb	r1, r1
 8001c2c:	408b      	lsls	r3, r1
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e06d      	b.n	8001d12 <HAL_RCC_OscConfig+0x62e>
 8001c36:	2301      	movs	r3, #1
 8001c38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe feeb 	bl	8000a3c <HAL_GetTick>
 8001c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fee6 	bl	8000a3c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d902      	bls.n	8001c82 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	f000 bd7e 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5d4>
 8001cac:	4b01      	ldr	r3, [pc, #4]	; (8001cb4 <HAL_RCC_OscConfig+0x5d0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e016      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5fc>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cdc:	4bbf      	ldr	r3, [pc, #764]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ce6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cea:	fa92 f2a2 	rbit	r2, r2
 8001cee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001cf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cf6:	fab2 f282 	clz	r2, r2
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f042 0220 	orr.w	r2, r2, #32
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ac      	bne.n	8001c6c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8113 	beq.w	8001f4e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d07c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x74e>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	4ba2      	ldr	r3, [pc, #648]	; (8001fe0 <HAL_RCC_OscConfig+0x8fc>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2301      	movs	r3, #1
 8001d60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7fe fe6b 	bl	8000a3c <HAL_GetTick>
 8001d66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fe66 	bl	8000a3c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d902      	bls.n	8001d82 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f000 bcfe 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dee:	2102      	movs	r1, #2
 8001df0:	6019      	str	r1, [r3, #0]
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f1a3 	rbit	r1, r3
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e08:	6019      	str	r1, [r3, #0]
  return result;
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d09d      	beq.n	8001d6c <HAL_RCC_OscConfig+0x688>
 8001e30:	e08d      	b.n	8001f4e <HAL_RCC_OscConfig+0x86a>
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e54:	601a      	str	r2, [r3, #0]
  return result;
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e5e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x8fc>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fde2 	bl	8000a3c <HAL_GetTick>
 8001e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7fe fddd 	bl	8000a3c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d902      	bls.n	8001e94 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	f000 bc75 	b.w	800277e <HAL_RCC_OscConfig+0x109a>
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001efe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	6019      	str	r1, [r3, #0]
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f1a3 	rbit	r1, r3
 8001f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f22:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f26:	6019      	str	r1, [r3, #0]
  return result;
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d197      	bne.n	8001e7e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 81a5 	beq.w	80022ae <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_RCC_OscConfig+0x8f8>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_OscConfig+0x900>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d121      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_RCC_OscConfig+0x900>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x900>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbc:	f7fe fd3e 	bl	8000a3c <HAL_GetTick>
 8001fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e010      	b.n	8001fe8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe fd39 	bl	8000a3c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d908      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e3d1      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	10908120 	.word	0x10908120
 8001fe4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b8d      	ldr	r3, [pc, #564]	; (8002220 <HAL_RCC_OscConfig+0xb3c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0e8      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x92e>
 8002004:	4b87      	ldr	r3, [pc, #540]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a86      	ldr	r2, [pc, #536]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e035      	b.n	800207e <HAL_RCC_OscConfig+0x99a>
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x958>
 8002022:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a7f      	ldr	r2, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a7c      	ldr	r2, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
 800203a:	e020      	b.n	800207e <HAL_RCC_OscConfig+0x99a>
 800203c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002040:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x982>
 800204c:	4b75      	ldr	r3, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a74      	ldr	r2, [pc, #464]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a71      	ldr	r2, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0x99a>
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a6e      	ldr	r2, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a6b      	ldr	r2, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8081 	beq.w	8002192 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7fe fcd4 	bl	8000a3c <HAL_GetTick>
 8002094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe fccf 	bl	8000a3c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e365      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020ba:	2202      	movs	r2, #2
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002102:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0xa3a>
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0xa62>
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002126:	2202      	movs	r2, #2
 8002128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800214e:	2102      	movs	r1, #2
 8002150:	6011      	str	r1, [r2, #0]
 8002152:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002156:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fa92 f1a2 	rbit	r1, r2
 8002160:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002164:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002168:	6011      	str	r1, [r2, #0]
  return result;
 800216a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800216e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d084      	beq.n	800209a <HAL_RCC_OscConfig+0x9b6>
 8002190:	e083      	b.n	800229a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fc53 	bl	8000a3c <HAL_GetTick>
 8002196:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe fc4e 	bl	8000a3c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e2e4      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021fa:	601a      	str	r2, [r3, #0]
  return result;
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002204:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d106      	bne.n	8002228 <HAL_RCC_OscConfig+0xb44>
 800221a:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_OscConfig+0xb40>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	e017      	b.n	8002250 <HAL_RCC_OscConfig+0xb6c>
 8002220:	40007000 	.word	0x40007000
 8002224:	40021000 	.word	0x40021000
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	4bb3      	ldr	r3, [pc, #716]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002254:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002258:	2102      	movs	r1, #2
 800225a:	6011      	str	r1, [r2, #0]
 800225c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002260:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	fa92 f1a2 	rbit	r1, r2
 800226a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800226e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002272:	6011      	str	r1, [r2, #0]
  return result;
 8002274:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002278:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d180      	bne.n	800219c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b9e      	ldr	r3, [pc, #632]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a9d      	ldr	r2, [pc, #628]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 825e 	beq.w	800277c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	f000 821f 	beq.w	800270c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	f040 8170 	bne.w	80025c0 <HAL_RCC_OscConfig+0xedc>
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002304:	601a      	str	r2, [r3, #0]
  return result;
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800230e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2300      	movs	r3, #0
 8002324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fb89 	bl	8000a3c <HAL_GetTick>
 800232a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	e009      	b.n	8002344 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fb84 	bl	8000a3c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e21c      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002364:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002368:	601a      	str	r2, [r3, #0]
  return result;
 800236a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002372:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_RCC_OscConfig+0xcaa>
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e027      	b.n	80023de <HAL_RCC_OscConfig+0xcfa>
 800238e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002392:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ea:	6011      	str	r1, [r2, #0]
 80023ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023f0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	fa92 f1a2 	rbit	r1, r2
 80023fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023fe:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002402:	6011      	str	r1, [r2, #0]
  return result;
 8002404:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002408:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0220 	orr.w	r2, r2, #32
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d182      	bne.n	8002330 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f023 020f 	bic.w	r2, r3, #15
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 8002440:	4313      	orrs	r3, r2
 8002442:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800244c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	430b      	orrs	r3, r1
 8002466:	492d      	ldr	r1, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002470:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002490:	601a      	str	r2, [r3, #0]
  return result;
 8002492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002496:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800249a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fac3 	bl	8000a3c <HAL_GetTick>
 80024b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fabe 	bl	8000a3c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e156      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024f4:	601a      	str	r2, [r3, #0]
  return result;
 80024f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_RCC_OscConfig+0xe3c>
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <HAL_RCC_OscConfig+0xe38>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	e02a      	b.n	8002570 <HAL_RCC_OscConfig+0xe8c>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002524:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002540:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800254e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002566:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4b86      	ldr	r3, [pc, #536]	; (8002788 <HAL_RCC_OscConfig+0x10a4>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002574:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002578:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800257c:	6011      	str	r1, [r2, #0]
 800257e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002582:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fa92 f1a2 	rbit	r1, r2
 800258c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002590:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002594:	6011      	str	r1, [r2, #0]
  return result;
 8002596:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800259a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f042 0220 	orr.w	r2, r2, #32
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f002 021f 	and.w	r2, r2, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f43f af7f 	beq.w	80024bc <HAL_RCC_OscConfig+0xdd8>
 80025be:	e0dd      	b.n	800277c <HAL_RCC_OscConfig+0x1098>
 80025c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025e4:	601a      	str	r2, [r3, #0]
  return result;
 80025e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025ee:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fa19 	bl	8000a3c <HAL_GetTick>
 800260a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	e009      	b.n	8002624 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fa14 	bl	8000a3c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0ac      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
 8002624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002628:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800262c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002652:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0xf8a>
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_OscConfig+0x10a4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e027      	b.n	80026be <HAL_RCC_OscConfig+0xfda>
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002680:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x10a4>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026c2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026ca:	6011      	str	r1, [r2, #0]
 80026cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	fa92 f1a2 	rbit	r1, r2
 80026da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026de:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026e2:	6011      	str	r1, [r2, #0]
  return result;
 80026e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026e8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d182      	bne.n	8002610 <HAL_RCC_OscConfig+0xf2c>
 800270a:	e037      	b.n	800277c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e02e      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_OscConfig+0x10a4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x10a4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002730:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002734:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	d117      	bne.n	8002778 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002748:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800274c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002754:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275c:	429a      	cmp	r2, r3
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b09e      	sub	sp, #120	; 0x78
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e162      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b90      	ldr	r3, [pc, #576]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	498b      	ldr	r1, [pc, #556]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b89      	ldr	r3, [pc, #548]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e14a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b82      	ldr	r3, [pc, #520]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	497f      	ldr	r1, [pc, #508]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80dc 	beq.w	80029b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d13c      	bne.n	8002882 <HAL_RCC_ClockConfig+0xf6>
 8002808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <HAL_RCC_ClockConfig+0xa6>
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e00f      	b.n	8002852 <HAL_RCC_ClockConfig+0xc6>
 8002832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	663b      	str	r3, [r7, #96]	; 0x60
 8002846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800284e:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002856:	65ba      	str	r2, [r7, #88]	; 0x58
 8002858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800285a:	fa92 f2a2 	rbit	r2, r2
 800285e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002862:	fab2 f282 	clz	r2, r2
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f042 0220 	orr.w	r2, r2, #32
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f002 021f 	and.w	r2, r2, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f202 	lsl.w	r2, r1, r2
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d17b      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0f3      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d13c      	bne.n	8002904 <HAL_RCC_ClockConfig+0x178>
 800288a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x128>
 80028ae:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_ClockConfig+0x148>
 80028b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
 80028c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80028da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028dc:	fa92 f2a2 	rbit	r2, r2
 80028e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f002 021f 	and.w	r2, r2, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d13a      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b2      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
 8002904:	2302      	movs	r3, #2
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_RCC_ClockConfig+0x1a0>
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e00d      	b.n	8002948 <HAL_RCC_ClockConfig+0x1bc>
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	2202      	movs	r2, #2
 800294a:	61ba      	str	r2, [r7, #24]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	fa92 f2a2 	rbit	r2, r2
 8002952:	617a      	str	r2, [r7, #20]
  return result;
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e079      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	491a      	ldr	r1, [pc, #104]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002988:	f7fe f858 	bl	8000a3c <HAL_GetTick>
 800298c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe f854 	bl	8000a3c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e061      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_RCC_ClockConfig+0x260>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d214      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0207 	bic.w	r2, r3, #7
 80029ce:	4906      	ldr	r1, [pc, #24]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e040      	b.n	8002a6a <HAL_RCC_ClockConfig+0x2de>
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_ClockConfig+0x2e8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	491a      	ldr	r1, [pc, #104]	; (8002a74 <HAL_RCC_ClockConfig+0x2e8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x2e8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4912      	ldr	r1, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2e:	f000 f829 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a32:	4601      	mov	r1, r0
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_ClockConfig+0x2e8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3c:	22f0      	movs	r2, #240	; 0xf0
 8002a3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	60fa      	str	r2, [r7, #12]
  return result;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	40d3      	lsrs	r3, r2
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x2ec>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	fa21 f303 	lsr.w	r3, r1, r3
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_RCC_ClockConfig+0x2f0>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_ClockConfig+0x2f4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fede 	bl	8000824 <HAL_InitTick>
  
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3778      	adds	r7, #120	; 0x78
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08003e84 	.word	0x08003e84
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000004 	.word	0x20000004

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b08b      	sub	sp, #44	; 0x2c
 8002a88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x36>
 8002ab2:	e03f      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ab6:	623b      	str	r3, [r7, #32]
      break;
 8002ab8:	e03f      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ac0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ac4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	fa92 f2a2 	rbit	r2, r2
 8002acc:	607a      	str	r2, [r7, #4]
  return result;
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	40d3      	lsrs	r3, r2
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	fa92 f2a2 	rbit	r2, r2
 8002af0:	60fa      	str	r2, [r7, #12]
  return result;
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	40d3      	lsrs	r3, r2
 8002afc:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	e007      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	623b      	str	r3, [r7, #32]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b36:	623b      	str	r3, [r7, #32]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	372c      	adds	r7, #44	; 0x2c
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	08003e9c 	.word	0x08003e9c
 8002b54:	08003eac 	.word	0x08003eac

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b76:	f7ff ffef 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	fa92 f2a2 	rbit	r2, r2
 8002b90:	603a      	str	r2, [r7, #0]
  return result;
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	40d3      	lsrs	r3, r2
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08003e94 	.word	0x08003e94

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bba:	f7ff ffcd 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	603a      	str	r2, [r7, #0]
  return result;
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	40d3      	lsrs	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08003e94 	.word	0x08003e94

08002bf8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	220f      	movs	r2, #15
 8002c06:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCC_GetClockConfig+0x5c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_GetClockConfig+0x5c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_RCC_GetClockConfig+0x60>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0207 	and.w	r2, r3, #7
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40022000 	.word	0x40022000

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b092      	sub	sp, #72	; 0x48
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80d4 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c80:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10e      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fd febb 	bl	8000a3c <HAL_GetTick>
 8002cc6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fd feb7 	bl	8000a3c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1d6      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8084 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d07c      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2301      	movs	r3, #1
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d5a:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04b      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fd fe67 	bl	8000a3c <HAL_GetTick>
 8002d6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fd fe63 	bl	8000a3c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e180      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002da0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d108      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002db6:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	e00d      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	10908100 	.word	0x10908100
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	4b9a      	ldr	r3, [pc, #616]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2202      	movs	r2, #2
 8002dda:	613a      	str	r2, [r7, #16]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	fa92 f2a2 	rbit	r2, r2
 8002de2:	60fa      	str	r2, [r7, #12]
  return result;
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	fab2 f282 	clz	r2, r2
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f002 021f 	and.w	r2, r2, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0b7      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e02:	4b8f      	ldr	r3, [pc, #572]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	498c      	ldr	r1, [pc, #560]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b88      	ldr	r3, [pc, #544]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4a87      	ldr	r2, [pc, #540]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e34:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	497f      	ldr	r1, [pc, #508]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e52:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4978      	ldr	r1, [pc, #480]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e70:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4970      	ldr	r1, [pc, #448]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f023 0210 	bic.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4969      	ldr	r1, [pc, #420]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	4961      	ldr	r1, [pc, #388]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f023 0220 	bic.w	r2, r3, #32
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	495a      	ldr	r1, [pc, #360]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee8:	4b55      	ldr	r3, [pc, #340]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	4952      	ldr	r1, [pc, #328]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	494b      	ldr	r1, [pc, #300]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f24:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4943      	ldr	r1, [pc, #268]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	493c      	ldr	r1, [pc, #240]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f60:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	492d      	ldr	r1, [pc, #180]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	4925      	ldr	r1, [pc, #148]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	491e      	ldr	r1, [pc, #120]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	490f      	ldr	r1, [pc, #60]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003032:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003046:	4913      	ldr	r1, [pc, #76]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003048:	4313      	orrs	r3, r2
 800304a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	490b      	ldr	r1, [pc, #44]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003066:	4313      	orrs	r3, r2
 8003068:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003084:	4313      	orrs	r3, r2
 8003086:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3748      	adds	r7, #72	; 0x48
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e049      	b.n	800313e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f841 	bl	8003146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 f9f8 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04f      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <HAL_TIM_Base_Start_IT+0xc4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d018      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_TIM_Base_Start_IT+0xc8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_TIM_Base_Start_IT+0xcc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_TIM_Base_Start_IT+0xd0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_TIM_Base_Start_IT+0xd4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x76>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_TIM_Base_Start_IT+0xdc>)
 80031da:	4013      	ands	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d015      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0xb4>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d011      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fc:	e008      	b.n	8003210 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40013400 	.word	0x40013400
 8003230:	40014000 	.word	0x40014000
 8003234:	40015000 	.word	0x40015000
 8003238:	00010007 	.word	0x00010007

0800323c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0202 	mvn.w	r2, #2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f905 	bl	800348e <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f8f7 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f908 	bl	80034a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0204 	mvn.w	r2, #4
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8db 	bl	800348e <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8cd 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8de 	bl	80034a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0208 	mvn.w	r2, #8
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8b1 	bl	800348e <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8a3 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8b4 	bl	80034a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0210 	mvn.w	r2, #16
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2208      	movs	r2, #8
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f887 	bl	800348e <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f879 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f88a 	bl	80034a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0201 	mvn.w	r2, #1
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd f970 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f918 	bl	800361c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d10e      	bne.n	800341a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d107      	bne.n	800341a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f90b 	bl	8003630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d10e      	bne.n	8003446 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d107      	bne.n	8003446 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f838 	bl	80034b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d10e      	bne.n	8003472 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b20      	cmp	r3, #32
 8003460:	d107      	bne.n	8003472 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0220 	mvn.w	r2, #32
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8cb 	bl	8003608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d00f      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <TIM_Base_SetConfig+0x120>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <TIM_Base_SetConfig+0x128>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <TIM_Base_SetConfig+0x12c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01f      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d01b      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <TIM_Base_SetConfig+0x120>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d017      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <TIM_Base_SetConfig+0x128>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00f      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <TIM_Base_SetConfig+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00b      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <TIM_Base_SetConfig+0x134>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <TIM_Base_SetConfig+0x138>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d108      	bne.n	8003578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <TIM_Base_SetConfig+0x100>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <TIM_Base_SetConfig+0x128>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x100>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <TIM_Base_SetConfig+0x130>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x100>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <TIM_Base_SetConfig+0x134>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x100>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a11      	ldr	r2, [pc, #68]	; (8003604 <TIM_Base_SetConfig+0x138>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x100>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0x12c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40015000 	.word	0x40015000
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e040      	b.n	80036d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd f89a 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f82c 	bl	80036e0 <UART_SetConfig>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e022      	b.n	80036d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9f6 	bl	8003a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa7d 	bl	8003bd0 <UART_CheckIdleState>
 80036d6:	4603      	mov	r3, r0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b92      	ldr	r3, [pc, #584]	; (8003954 <UART_SetConfig+0x274>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	430b      	orrs	r3, r1
 8003716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a80      	ldr	r2, [pc, #512]	; (8003958 <UART_SetConfig+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d120      	bne.n	800379e <UART_SetConfig+0xbe>
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <UART_SetConfig+0x27c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0xb8>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x90>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	0800378d 	.word	0x0800378d
 8003778:	08003793 	.word	0x08003793
 800377c:	08003787 	.word	0x08003787
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0b5      	b.n	80038f2 <UART_SetConfig+0x212>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e0b2      	b.n	80038f2 <UART_SetConfig+0x212>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e0af      	b.n	80038f2 <UART_SetConfig+0x212>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e0ac      	b.n	80038f2 <UART_SetConfig+0x212>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e0a9      	b.n	80038f2 <UART_SetConfig+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <UART_SetConfig+0x280>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d124      	bne.n	80037f2 <UART_SetConfig+0x112>
 80037a8:	4b6c      	ldr	r3, [pc, #432]	; (800395c <UART_SetConfig+0x27c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b4:	d011      	beq.n	80037da <UART_SetConfig+0xfa>
 80037b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037ba:	d817      	bhi.n	80037ec <UART_SetConfig+0x10c>
 80037bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c0:	d011      	beq.n	80037e6 <UART_SetConfig+0x106>
 80037c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c6:	d811      	bhi.n	80037ec <UART_SetConfig+0x10c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <UART_SetConfig+0xf4>
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d006      	beq.n	80037e0 <UART_SetConfig+0x100>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x10c>
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e08b      	b.n	80038f2 <UART_SetConfig+0x212>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e088      	b.n	80038f2 <UART_SetConfig+0x212>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e085      	b.n	80038f2 <UART_SetConfig+0x212>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e082      	b.n	80038f2 <UART_SetConfig+0x212>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e07f      	b.n	80038f2 <UART_SetConfig+0x212>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <UART_SetConfig+0x284>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d124      	bne.n	8003846 <UART_SetConfig+0x166>
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <UART_SetConfig+0x27c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003804:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003808:	d011      	beq.n	800382e <UART_SetConfig+0x14e>
 800380a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800380e:	d817      	bhi.n	8003840 <UART_SetConfig+0x160>
 8003810:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003814:	d011      	beq.n	800383a <UART_SetConfig+0x15a>
 8003816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800381a:	d811      	bhi.n	8003840 <UART_SetConfig+0x160>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <UART_SetConfig+0x148>
 8003820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x154>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x160>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e061      	b.n	80038f2 <UART_SetConfig+0x212>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e05e      	b.n	80038f2 <UART_SetConfig+0x212>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e05b      	b.n	80038f2 <UART_SetConfig+0x212>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e058      	b.n	80038f2 <UART_SetConfig+0x212>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e055      	b.n	80038f2 <UART_SetConfig+0x212>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a47      	ldr	r2, [pc, #284]	; (8003968 <UART_SetConfig+0x288>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d124      	bne.n	800389a <UART_SetConfig+0x1ba>
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <UART_SetConfig+0x27c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	d011      	beq.n	8003882 <UART_SetConfig+0x1a2>
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003862:	d817      	bhi.n	8003894 <UART_SetConfig+0x1b4>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x1ae>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386e:	d811      	bhi.n	8003894 <UART_SetConfig+0x1b4>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0x19c>
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d006      	beq.n	8003888 <UART_SetConfig+0x1a8>
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x1b4>
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e037      	b.n	80038f2 <UART_SetConfig+0x212>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e034      	b.n	80038f2 <UART_SetConfig+0x212>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e031      	b.n	80038f2 <UART_SetConfig+0x212>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e02e      	b.n	80038f2 <UART_SetConfig+0x212>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e02b      	b.n	80038f2 <UART_SetConfig+0x212>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a33      	ldr	r2, [pc, #204]	; (800396c <UART_SetConfig+0x28c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d124      	bne.n	80038ee <UART_SetConfig+0x20e>
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <UART_SetConfig+0x27c>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b0:	d011      	beq.n	80038d6 <UART_SetConfig+0x1f6>
 80038b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b6:	d817      	bhi.n	80038e8 <UART_SetConfig+0x208>
 80038b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038bc:	d011      	beq.n	80038e2 <UART_SetConfig+0x202>
 80038be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c2:	d811      	bhi.n	80038e8 <UART_SetConfig+0x208>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x1f0>
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d006      	beq.n	80038dc <UART_SetConfig+0x1fc>
 80038ce:	e00b      	b.n	80038e8 <UART_SetConfig+0x208>
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e00d      	b.n	80038f2 <UART_SetConfig+0x212>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e00a      	b.n	80038f2 <UART_SetConfig+0x212>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e007      	b.n	80038f2 <UART_SetConfig+0x212>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e004      	b.n	80038f2 <UART_SetConfig+0x212>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e001      	b.n	80038f2 <UART_SetConfig+0x212>
 80038ee:	2310      	movs	r3, #16
 80038f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d16c      	bne.n	80039d6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d838      	bhi.n	8003974 <UART_SetConfig+0x294>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x228>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003975 	.word	0x08003975
 8003918:	08003943 	.word	0x08003943
 800391c:	08003975 	.word	0x08003975
 8003920:	08003975 	.word	0x08003975
 8003924:	08003975 	.word	0x08003975
 8003928:	0800394b 	.word	0x0800394b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff f920 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003930:	61b8      	str	r0, [r7, #24]
        break;
 8003932:	e024      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7ff f93e 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003938:	61b8      	str	r0, [r7, #24]
        break;
 800393a:	e020      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <UART_SetConfig+0x290>)
 800393e:	61bb      	str	r3, [r7, #24]
        break;
 8003940:	e01d      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7ff f89f 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8003946:	61b8      	str	r0, [r7, #24]
        break;
 8003948:	e019      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	61bb      	str	r3, [r7, #24]
        break;
 8003950:	e015      	b.n	800397e <UART_SetConfig+0x29e>
 8003952:	bf00      	nop
 8003954:	efff69f3 	.word	0xefff69f3
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40004400 	.word	0x40004400
 8003964:	40004800 	.word	0x40004800
 8003968:	40004c00 	.word	0x40004c00
 800396c:	40005000 	.word	0x40005000
 8003970:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77bb      	strb	r3, [r7, #30]
        break;
 800397c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d075      	beq.n	8003a70 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	005a      	lsls	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	d916      	bls.n	80039d0 <UART_SetConfig+0x2f0>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d212      	bcs.n	80039d0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f023 030f 	bic.w	r3, r3, #15
 80039b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	b29a      	uxth	r2, r3
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	89fa      	ldrh	r2, [r7, #14]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	e04f      	b.n	8003a70 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	77bb      	strb	r3, [r7, #30]
 80039d4:	e04c      	b.n	8003a70 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d828      	bhi.n	8003a2e <UART_SetConfig+0x34e>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x304>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7ff f8b2 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e013      	b.n	8003a38 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff f8d0 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003a14:	61b8      	str	r0, [r7, #24]
        break;
 8003a16:	e00f      	b.n	8003a38 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <UART_SetConfig+0x3a8>)
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e00c      	b.n	8003a38 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7ff f831 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8003a22:	61b8      	str	r0, [r7, #24]
        break;
 8003a24:	e008      	b.n	8003a38 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e004      	b.n	8003a38 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	77bb      	strb	r3, [r7, #30]
        break;
 8003a36:	bf00      	nop
    }

    if (pclk != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085a      	lsrs	r2, r3, #1
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d908      	bls.n	8003a6c <UART_SetConfig+0x38c>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d204      	bcs.n	8003a6c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e001      	b.n	8003a70 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d10a      	bne.n	8003ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be0:	f7fc ff2c 	bl	8000a3c <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d10e      	bne.n	8003c12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f82d 	bl	8003c62 <UART_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e023      	b.n	8003c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d10e      	bne.n	8003c3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f817 	bl	8003c62 <UART_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e00d      	b.n	8003c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b09c      	sub	sp, #112	; 0x70
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c72:	e0a5      	b.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c7a:	f000 80a1 	beq.w	8003dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fc fedd 	bl	8000a3c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d13e      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e6      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e067      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d04f      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2e:	d147      	bne.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e6      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d8c:	623a      	str	r2, [r7, #32]
 8003d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	6a3a      	ldr	r2, [r7, #32]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e010      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	f43f af4a 	beq.w	8003c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3770      	adds	r7, #112	; 0x70
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4d0d      	ldr	r5, [pc, #52]	; (8003e24 <__libc_init_array+0x38>)
 8003df0:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	2600      	movs	r6, #0
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	4d0b      	ldr	r5, [pc, #44]	; (8003e2c <__libc_init_array+0x40>)
 8003dfe:	4c0c      	ldr	r4, [pc, #48]	; (8003e30 <__libc_init_array+0x44>)
 8003e00:	f000 f820 	bl	8003e44 <_init>
 8003e04:	1b64      	subs	r4, r4, r5
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	2600      	movs	r6, #0
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08003ebc 	.word	0x08003ebc
 8003e28:	08003ebc 	.word	0x08003ebc
 8003e2c:	08003ebc 	.word	0x08003ebc
 8003e30:	08003ec0 	.word	0x08003ec0

08003e34 <memset>:
 8003e34:	4402      	add	r2, r0
 8003e36:	4603      	mov	r3, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <memset+0xa>
 8003e3c:	4770      	bx	lr
 8003e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e42:	e7f9      	b.n	8003e38 <memset+0x4>

08003e44 <_init>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr

08003e50 <_fini>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr
